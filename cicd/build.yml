pool:
  vmImage: 'windows-latest'

variables:
  solution: 'DnDGen.Web.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
# The DnDGen Website
- job: DnDGen_Web
  displayName: DnDGen Website
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Web/DnDGen.Web.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Server-side Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Web.Tests.Unit/DnDGen.Web.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Web.Tests.Integration/DnDGen.Web.Tests.Integration.csproj'
      arguments: '-v normal'
  - task: NuGetCommand@2
    displayName: Install Chutzpah
    retryCountOnTaskFailure: 3
    inputs:
      command: custom
      arguments: 'install Chutzpah -OutputDirectory $(System.DefaultWorkingDirectory)/testrunner'
  - task: VSTest@2
    displayName: Run Client-side Unit Tests
    inputs:
      pathtoCustomTestAdapters: '$(System.DefaultWorkingDirectory)/testrunner/'
      testAssemblyVer2: 'DnDGen.Web.Tests.Unit/**/chutzpah.json'
      failOnMinTestsNotRun: true

  # - task: NodeTool@0
  #   inputs:
  #     versionSpec: '16.x'
  #   displayName: 'Install Node.js 16.x'

  # - script: |
  #     cd AngularWithAzure/
  #     npm install -g @angular/cli
  #     npm install
  #     ng build --prod
  #   displayName: 'npm install and build'
  #   workingDirectory: '$(Build.SourcesDirectory)'
  # - task: CmdLine@2
  #   displayName: "Run unit tests"
  #   inputs:
  #     script: |
  #       cd AngularWithAzure/
  #       ng test --browsers=ChromeHeadless --code-coverage --watch=false
  # - task: ArchiveFiles@2
  #   displayName: 'Archive files'
  #   inputs:
  #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/angular-with-azure/'
  #     includeRootFolder: false
  #     archiveType: zip
  #     archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  #     replaceExistingArchive: true
# - task: Npm@1  
#   displayName: 'Angular CLI 13.2.5'  
#   inputs:  
#     command: custom  
#     verbose: false  
#     customCommand: 'install -g @angular/cli@13.2.5'
 
# - task: Npm@1  
#   displayName: 'npm install'  
#   inputs:
#     command: custom  
#     customCommand: 'install file:custom-angular-lib.tgz --legacy-peer-deps'  
   
# - task: Npm@1  
#   displayName: Build  
#   inputs: 
#     command: custom  
#     verbose: false  
#     customCommand: 'run build'
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  #     ArtifactName: 'drop'
  #     publishLocation: 'Container'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Website
    inputs:
      command: publish
      projects: 'DnDGen.Web/DnDGen.Web.csproj'
      publishWebProjects: False
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Website'
      zipAfterPublish: True
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Website Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Website' 
      artifactName: 'dndgen-web'
      
# The RollGen API
- job: RollGen_Api
  displayName: RollGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.RollGen/DnDGen.Api.RollGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.RollGen.Tests.Unit/DnDGen.Api.RollGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.RollGen.Tests.Integration/DnDGen.Api.RollGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.RollGen/DnDGen.Api.RollGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/RollGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/RollGen' 
      artifactName: 'rollgen-api'

# The TreasureGen API
- job: TreasureGen_Api
  displayName: TreasureGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.TreasureGen/DnDGen.Api.TreasureGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.TreasureGen.Tests.Unit/DnDGen.Api.TreasureGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.TreasureGen.Tests.Integration/DnDGen.Api.TreasureGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.TreasureGen/DnDGen.Api.TreasureGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/TreasureGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/TreasureGen' 
      artifactName: 'treasuregen-api'

# The Post-Deployment Tests
- job: deployTests
  displayName: Package Post-Deployment Tests
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Post-Deployment Test Artifacts
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/cicd/post-deployment-tests' 
      artifactName: 'dndgen-deployment-tests'
      