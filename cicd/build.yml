pool:
  vmImage: 'windows-latest'

variables:
  solution: 'DnDGen.Web.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
# The DnDGen Website
- job: DnDGen_Web
  displayName: DnDGen Website
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: NodeTool@0
    displayName: 'Install node.js'
  - script: |
      cd DnDGen.Web/dndgen-web/
      npm install -g @angular/cli
      npm install
      npm run build:ci
    displayName: 'Build Code'
    workingDirectory: '$(Build.SourcesDirectory)'
  - script: |
      cd DnDGen.Web/dndgen-web/
      npm run test:ci
    displayName: "Run Unit Tests"
    workingDirectory: '$(Build.SourcesDirectory)'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFiles: '**/TESTS-*.xml'
      failTaskOnFailedTests: true
  - task: ArchiveFiles@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/dndgen-web/'
      includeRootFolder: false
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      replaceExistingArchive: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Website Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      artifactName: 'dndgen-web'
      
# The RollGen API
- job: RollGen_Api
  displayName: RollGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.RollGen/DnDGen.Api.RollGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.RollGen.Tests.Unit/DnDGen.Api.RollGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.RollGen.Tests.Integration/DnDGen.Api.RollGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.RollGen/DnDGen.Api.RollGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/RollGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/RollGen' 
      artifactName: 'rollgen-api'

# The TreasureGen API
- job: TreasureGen_Api
  displayName: TreasureGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.TreasureGen/DnDGen.Api.TreasureGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.TreasureGen.Tests.Unit/DnDGen.Api.TreasureGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.TreasureGen.Tests.Integration/DnDGen.Api.TreasureGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.TreasureGen/DnDGen.Api.TreasureGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/TreasureGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/TreasureGen' 
      artifactName: 'treasuregen-api'

# The CharacterGen API
- job: CharacterGen_Api
  displayName: CharacterGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.CharacterGen/DnDGen.Api.CharacterGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.CharacterGen.Tests.Unit/DnDGen.Api.CharacterGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.CharacterGen.Tests.Integration/DnDGen.Api.CharacterGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.CharacterGen/DnDGen.Api.CharacterGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/CharacterGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/CharacterGen' 
      artifactName: 'charactergen-api'

# The EncounterGen API
- job: EncounterGen_Api
  displayName: EncounterGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.EncounterGen/DnDGen.Api.EncounterGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.EncounterGen.Tests.Unit/DnDGen.Api.EncounterGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.EncounterGen.Tests.Integration/DnDGen.Api.EncounterGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.EncounterGen/DnDGen.Api.EncounterGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/EncounterGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/EncounterGen' 
      artifactName: 'encountergen-api'

# The DungeonGen API
- job: DungeonGen_Api
  displayName: DungeonGen API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.DungeonGen/DnDGen.Api.DungeonGen.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.DungeonGen.Tests.Unit/DnDGen.Api.DungeonGen.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.DungeonGen.Tests.Integration/DnDGen.Api.DungeonGen.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.DungeonGen/DnDGen.Api.DungeonGen.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/DungeonGen'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/DungeonGen' 
      artifactName: 'dungeongen-api'

# The Web API
- job: Web_Api
  displayName: Web API
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'DnDGen.Api.Web/DnDGen.Api.Web.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.Web.Tests.Unit/DnDGen.Api.Web.Tests.Unit.csproj'
      arguments: '-v normal'
  - task: DotNetCoreCLI@2
    displayName: Run Integration Tests
    inputs:
      command: test
      projects: 'DnDGen.Api.Web.Tests.Integration/DnDGen.Api.Web.Tests.Integration.csproj'
      arguments: '-v normal'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish API
    inputs:
      command: 'publish'
      projects: 'DnDGen.Api.Web/DnDGen.Api.Web.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Api/Web'
      zipAfterPublish: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Api/Web' 
      artifactName: 'dndgen-web-api'

# The Post-Deployment Tests
- job: deployTests
  displayName: Package Post-Deployment Tests
  steps:
  - checkout: self
    displayName: 'Checkout Code'
    persistCredentials: true
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish Post-Deployment Test Artifacts
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/cicd/post-deployment-tests' 
      artifactName: 'dndgen-deployment-tests'
      