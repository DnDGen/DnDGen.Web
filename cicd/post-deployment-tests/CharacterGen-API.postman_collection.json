{
	"info": {
		"_postman_id": "34356649-7c5a-4b74-97c5-ede22477fa9d",
		"name": "CharacterGen API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28758235"
	},
	"item": [
		{
			"name": "V1",
			"item": [
				{
					"name": "Generate Character",
					"item": [
						{
							"name": "Alignment Randomizers",
							"item": [
								{
									"name": "Generate Character with Any Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Neutral Good\", \"Chaotic Good\", \"Lawful Neutral\", \"True Neutral\", \"Chaotic Neutral\", \"Lawful Evil\", \"Neutral Evil\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Any",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Chaotic Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-chaotic alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Neutral Good\", \"Lawful Neutral\", \"True Neutral\", \"Lawful Evil\", \"Neutral Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Chaotic",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Chaotic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Evil Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-evil alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Neutral Good\", \"Chaotic Good\", \"Lawful Neutral\", \"True Neutral\", \"Chaotic Neutral\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Evil",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Evil"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Good Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-good alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Neutral\", \"True Neutral\", \"Chaotic Neutral\", \"Lawful Evil\", \"Neutral Evil\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Good",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Good"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Lawful Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-lawful alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Neutral Good\", \"Chaotic Good\", \"True Neutral\", \"Chaotic Neutral\", \"Neutral Evil\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Lawful",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Lawful"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Neutral Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-neutral alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Chaotic Good\", \"Lawful Evil\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Neutral",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Neutral"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Chaotic Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with chaotic alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Chaotic Good\", \"Chaotic Neutral\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Chaotic",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Chaotic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Evil Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with evil alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Evil\", \"Neutral Evil\", \"Chaotic Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Evil",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Evil"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Good Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with good alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Neutral Good\", \"Chaotic Good\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Good",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Good"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Lawful Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with lawful alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Lawful Good\", \"Lawful Neutral\", \"Lawful Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Lawful",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Lawful"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Neutral Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with neutral alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.be.oneOf([\"Neutral Good\", \"Lawful Neutral\", \"True Neutral\", \"Chaotic Neutral\", \"Neutral Evil\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Neutral",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Neutral"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set alignment\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.alignment.full).to.equal(\"Lawful Good\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Set&setAlignment=Lawful Good",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Lawful Good"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Alignment Randomizer returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Alignment returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Set&setAlignment=Invalid Alignment",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Invalid Alignment"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Alignment returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Set",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Invalid Alignment",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Class Name Randomizers",
							"item": [
								{
									"name": "Generate Character with Set Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.equal(\"Fighter\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Set&setClassName=Fighter",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Fighter"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Any Player Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any player class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Barbarian\", \"Bard\", \"Cleric\", \"Druid\", \"Fighter\", \"Paladin\", \"Monk\", \"Ranger\", \"Rogue\", \"Sorcerer\", \"Wizard\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Any Player",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with spellcaster class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Bard\", \"Cleric\", \"Druid\", \"Paladin\", \"Ranger\", \"Sorcerer\", \"Wizard\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Spellcaster",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Spellcaster"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Class Name Randomizer Returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Class Name Returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Set&setClassName=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Class Name Returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Set",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Invalid",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Stealth Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with stealth class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Bard\", \"Ranger\", \"Rogue\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Stealth",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Stealth"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-spellcaster class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Barbarian\", \"Fighter\", \"Monk\", \"Rogue\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Non-Spellcaster",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Non-Spellcaster"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Divine Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with divine spellcaster class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Cleric\", \"Druid\", \"Paladin\", \"Ranger\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Divine Spellcaster",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Divine Spellcaster"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Arcane Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with arcane spellcaster class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Bard\", \"Sorcerer\", \"Wizard\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Arcane Spellcaster",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Arcane Spellcaster"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Physical Combat Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with physical combat class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Barbarian\", \"Fighter\", \"Paladin\", \"Monk\", \"Ranger\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Physical Combat",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Physical Combat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Any NPC Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any NPC class name\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.name).to.be.oneOf([\"Adept\", \"Aristocrat\", \"Warrior\", \"Commoner\", \"Expert\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?classNameRandomizerType=Any NPC",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Any NPC"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Level Randomizers",
							"item": [
								{
									"name": "Generate Character with Any Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(1).and.at.most(20);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Any",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Any"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Low Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with low level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(1).and.at.most(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Low",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Low"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Medium Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with medium level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(6).and.at.most(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Medium",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Medium"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with High Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with high level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(11).and.at.most(15);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=High",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "High"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Very High Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with very high level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(16).and.at.most(20);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Very High",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Very High"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set level\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.class.level).to.be.at.least(1).and.at.most(20);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Set&setLevel=14",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Level Randomizer returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Level returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Set&setLevel=666",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "666"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Level returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?levelRandomizerType=Set",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "666",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Base Race Randomizers",
							"item": [
								{
									"name": "Generate Character with Any Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.not.be.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Any Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Aquatic Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with aquatic base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.be.oneOf([\"Aquatic Elf\", \"Sahuagin\", \"Kuo-toa\", \"Kapoacinth\", \"Locathah\", \"Merfolk\", \"Merrow\", \"Scrag\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Aquatic Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Aquatic Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Monster Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with monster base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.be.oneOf([\"Azer\", \"Blue Slaad\", \"Bugbear\", \"Centaur\", \"Cloud Giant\", \"Death Slaad\", \"Doppelganger\", \"Fire Giant\", \"Frost Giant\", \"Gargoyle\", \"Githyanki\", \"Githzerai\", \"Gnoll\", \"Goblin\", \"Gray Slaad\", \"Green Slaad\", \"Grimlock\", \"Harpy\", \"Hobgoblin\", \"Hound Archon\", \"Janni\", \"Kapoacinth\", \"Kobold\", \"Kuo-toa\", \"Lizardfolk\", \"Locathah\", \"Merfolk\", \"Merrow\", \"Minotaur\", \"Mummy\", \"Ogre\", \"Troll\", \"Scrag\", \"Ogre Mage\", \"Orc\", \"Pixie\", \"Rakshasa\", \"Red Slaad\", \"Sahuagin\", \"Satyr\", \"Scorpionfolk\", \"Storm Giant\", \"Stone Giant\", \"Troglodyte\", \"Yuan-ti Pureblood\", \"Yuan-ti Halfblood\", \"Yuan-ti Abomination\", \"Hill Giant\"]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Monster Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Monster Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Monster Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-monster base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.be.oneOf([\"Aasimar\", \"Aquatic Elf\", \"Deep Dwarf\", \"Deep Halfling\", \"Derro\", \"Drow\", \"Duergar Dwarf\", \"Forest Gnome\", \"Rock Gnome\", \"Svirfneblin\", \"Human\", \"High Elf\", \"Half-Elf\", \"Half-Orc\", \"Gray Elf\", \"Wild Elf\", \"Wood Elf\", \"Hill Dwarf\", \"Mountain Dwarf\", \"Lightfoot Halfling\", \"Tallfellow Halfling\", \"Tiefling\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Non-Monster Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Non-Monster Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Non-Standard Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with non-standard base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.not.be.oneOf([\"Human\", \"High Elf\", \"Hill Dwarf\", \"Lightfoot Halfling\", \"Half-Orc\", \"Half-Elf\", \"Rock Gnome\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Non-Standard Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Non-Standard Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Standard Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with standard base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.be.oneOf([\"Human\", \"High Elf\", \"Hill Dwarf\", \"Lightfoot Halfling\", \"Half-Orc\", \"Half-Elf\", \"Rock Gnome\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Standard Base",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Standard Base"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with standard base race\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.baseRace).to.equal(\"Tiefling\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Set&setBaseRace=Tiefling",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Tiefling"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Base Race Randomizer returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Base Race returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Set&setBaseRace=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Base Race returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?baseRaceRandomizerType=Set",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Invalid",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Metarace Randomizers",
							"item": [
								{
									"name": "Generate Character with Any Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.be.oneOf([\r",
													"        \"\", \r",
													"        \"Ghost\", \"Lich\", \"Vampire\",\r",
													"        \"Half-Celestial\", \"Half-Dragon\", \"Half-Fiend\",\r",
													"        \"Werebear\", \"Wereboar\", \"Wererat\", \"Weretiger\", \"Werewolf\", \"Dire Wereboar\", \"Dire Werewolf\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Any Meta",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Any Forced Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with any forced metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.be.oneOf([\r",
													"        \"Ghost\", \"Lich\", \"Vampire\",\r",
													"        \"Half-Celestial\", \"Half-Dragon\", \"Half-Fiend\",\r",
													"        \"Werebear\", \"Wereboar\", \"Wererat\", \"Weretiger\", \"Werewolf\", \"Dire Wereboar\", \"Dire Werewolf\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Any Meta&forceMetarace=true",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Genetic Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with genetic metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.be.oneOf([\r",
													"        \"\", \r",
													"        \"Half-Celestial\", \"Half-Dragon\", \"Half-Fiend\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Genetic Meta",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Genetic Meta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Lycanthrope Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with lycanthrope metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.be.oneOf([\r",
													"        \"\", \r",
													"        \"Werebear\", \"Wereboar\", \"Wererat\", \"Weretiger\", \"Werewolf\", \"Dire Wereboar\", \"Dire Werewolf\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Lycanthrope Meta",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Lycanthrope Meta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Undead Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with undead metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.be.oneOf([\r",
													"        \"\", \r",
													"        \"Ghost\", \"Lich\", \"Vampire\"\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Undead Meta",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Undead Meta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with No Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns generated character with no metarace\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.equal(\"\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=No Meta",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set metarace\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.equal(\"Half-Dragon\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Set&setMetarace=Half-Dragon",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Half-Dragon"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Metarace - None",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set metarace of none\", function () {\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.equal(\"\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Set&setMetarace",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Metarace Randomizer returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Metarace returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Set&setMetarace=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Metarace returns Character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns generated character with no metarace\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"    pm.expect(character.race.summary).to.not.be.empty;\r",
													"\r",
													"    pm.expect(character.race.metarace).to.equal(\"\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?metaraceRandomizerType=Set",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Invalid",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Abilities Randomizers",
							"item": [
								{
									"name": "Generate Character with Raw Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with raw abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(3).and.at.most(18);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Raw&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Average Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with average abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(10).and.at.most(13);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(10).and.at.most(13);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(10).and.at.most(13);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(10).and.at.most(13);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(10).and.at.most(13);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(10).and.at.most(13);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Average&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Average"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Poor Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with poor abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(3).and.at.most(9);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(3).and.at.most(9);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(3).and.at.most(9);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(3).and.at.most(9);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(3).and.at.most(9);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(3).and.at.most(9);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Poor&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Poor"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Good Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with good abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(13).and.at.most(16);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(13).and.at.most(16);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(13).and.at.most(16);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(13).and.at.most(16);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(13).and.at.most(16);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(13).and.at.most(16);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Good&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Good"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Heroic Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with heroic abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(15).and.at.most(18);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(15).and.at.most(18);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(15).and.at.most(18);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(15).and.at.most(18);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(15).and.at.most(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(15).and.at.most(18);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Heroic&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Heroic"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Best-of-Four Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with best of four abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(3).and.at.most(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(3).and.at.most(18);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Best of four&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Best of four"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Ones-as-Sixes Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with ones-as-sixes abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(6).and.at.most(18);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(6).and.at.most(18);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(6).and.at.most(18);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(6).and.at.most(18);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(6).and.at.most(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(6).and.at.most(18);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Ones as Sixes&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Ones as Sixes"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with 2d10 Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with 2d10 abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(2).and.at.most(20);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(2).and.at.most(20);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(2).and.at.most(20);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(2).and.at.most(20);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(2).and.at.most(20);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(2).and.at.most(20);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=2d10&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "2d10"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Abilities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set abilities\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the base race to Human to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.equal(10);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.equal(12);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.equal(14);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.equal(16);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.equal(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.equal(8);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&metaraceRandomizerType=No Meta&baseRaceRandomizerType=Set&setBaseRace=Human&levelRandomizerType=Set&setLevel=1&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8&allowAbilityAdjustments=false",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Human"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "1"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												},
												{
													"key": "allowAbilityAdjustments",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Abilities - Allow Adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set abilities, allowing adjustments\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    //INFO: Since the abilities will be increased randomly during level up, swapped for priorities, and enhanced by racial bonuses,\r",
													"    //we cannot predict which abilities will have which values. So, we will assert that they hit a minimum score.\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.be.at.least(8);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.be.at.least(8);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(8);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(8);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(8);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.be.at.least(8);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&metaraceRandomizerType=Set&baseRaceRandomizerType=Set&setBaseRace=Tiefling&levelRandomizerType=Set&setLevel=20&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8&allowAbilityAdjustments=true&setMetarace=Half-Fiend",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Tiefling"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "20"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												},
												{
													"key": "allowAbilityAdjustments",
													"value": "true"
												},
												{
													"key": "setMetarace",
													"value": "Half-Fiend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Character with Set Abilities - Do Not Allow Adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns generated character with set abilities, not allowing adjustments\", function () {\r",
													"    //INFO: We set the metarace to None to avoid racial adjustments\r",
													"    //INFO: We set the level to 1 to avoid level-up ability adjustments\r",
													"\r",
													"    var character = pm.response.json();\r",
													"    pm.expect(character.summary).to.not.be.empty;\r",
													"    pm.expect(character.class.level).to.be.at.least(1);\r",
													"\r",
													"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
													"    pm.expect(character.abilities.Strength.value).to.equal(10);\r",
													"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
													"    pm.expect(character.abilities.Constitution.value).to.equal(12);\r",
													"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
													"    pm.expect(character.abilities.Dexterity.value).to.equal(14);\r",
													"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
													"    pm.expect(character.abilities.Intelligence.value).to.equal(16);\r",
													"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
													"    pm.expect(character.abilities.Wisdom.value).to.equal(18);\r",
													"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
													"    pm.expect(character.abilities.Charisma.value).to.equal(8);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&metaraceRandomizerType=Set&baseRaceRandomizerType=Set&setBaseRace=Tiefling&levelRandomizerType=Set&setLevel=20&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8&allowAbilityAdjustments=false&setMetarace=Half-Fiend",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Tiefling"
												},
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "20"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												},
												{
													"key": "allowAbilityAdjustments",
													"value": "false"
												},
												{
													"key": "setMetarace",
													"value": "Half-Fiend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Abilities Randomizer returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Invalid",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Strength returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=0&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "0"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Constitution returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=0&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "0"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Dexterity returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=0&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "0"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Intelligence returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=0&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "0"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Wisdom returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=0&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "0"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Charisma returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=0",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Strength returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10",
													"disabled": true
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Constitution returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12",
													"disabled": true
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Dexterity returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14",
													"disabled": true
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Intelligence returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=14&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16",
													"disabled": true
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Wisdom returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setStrength=10&setConstitution=12&setDexterity=14&setIntelligence=16&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10"
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18",
													"disabled": true
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Charisma returns Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/generate?abilitiesRandomizerType=Set&setConstitution=12&setDexterity=14&setIntelligence=16&setWisdom=18&setCharisma=8",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"generate"
											],
											"query": [
												{
													"key": "abilitiesRandomizerType",
													"value": "Set"
												},
												{
													"key": "setStrength",
													"value": "10",
													"disabled": true
												},
												{
													"key": "setConstitution",
													"value": "12"
												},
												{
													"key": "setDexterity",
													"value": "14"
												},
												{
													"key": "setIntelligence",
													"value": "16"
												},
												{
													"key": "setWisdom",
													"value": "18"
												},
												{
													"key": "setCharisma",
													"value": "8"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Generate Character with Defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated character\", function () {\r",
											"    var character = pm.response.json();\r",
											"    pm.expect(character.summary).to.not.be.empty;\r",
											"    pm.expect(character.class.level).to.be.at.least(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/generate",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Character with No Defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated character\", function () {\r",
											"    var character = pm.response.json();\r",
											"    pm.expect(character.summary).to.not.be.empty;\r",
											"    pm.expect(character.class.level).to.be.at.least(1);\r",
											"\r",
											"    pm.expect(character.alignment.full).to.not.contain(\"Evil\");\r",
											"    pm.expect(character.class.name).to.be.oneOf([\"Barbarian\", \"Fighter\", \"Monk\", \"Paladin\", \"Ranger\"]);\r",
											"    pm.expect(character.class.level).to.be.at.least(11).and.at.most(15);\r",
											"    pm.expect(character.race.baseRace).to.be.oneOf([\"Human\", \"High Elf\", \"Half-Elf\", \"Half-Orc\", \"Lightfoot Halfling\", \"Rock Gnome\", \"Hill Dwarf\"]);\r",
											"    pm.expect(character.race.metarace).to.be.oneOf([\"Half-Celestial\", \"Half-Dragon\", \"Half-Fiend\"]);\r",
											"    pm.expect(character.abilities.Strength).to.not.be.null;\r",
											"    pm.expect(character.abilities.Strength.value).to.be.at.least(6);\r",
											"    pm.expect(character.abilities.Constitution).to.not.be.null;\r",
											"    pm.expect(character.abilities.Constitution.value).to.be.at.least(6);\r",
											"    pm.expect(character.abilities.Dexterity).to.not.be.null;\r",
											"    pm.expect(character.abilities.Dexterity.value).to.be.at.least(6);\r",
											"    pm.expect(character.abilities.Intelligence).to.not.be.null;\r",
											"    pm.expect(character.abilities.Intelligence.value).to.be.at.least(6);\r",
											"    pm.expect(character.abilities.Wisdom).to.not.be.null;\r",
											"    pm.expect(character.abilities.Wisdom.value).to.be.at.least(6);\r",
											"    pm.expect(character.abilities.Charisma).to.not.be.null;\r",
											"    pm.expect(character.abilities.Charisma.value).to.be.at.least(6);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Non-Evil&classNameRandomizerType=Physical Combat&levelRandomizerType=High&baseRaceRandomizerType=Standard Base&metaraceRandomizerType=Genetic Meta&forceMetarace=true&abilitiesRandomizerType=Ones as Sixes",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"generate"
									],
									"query": [
										{
											"key": "alignmentRandomizerType",
											"value": "Non-Evil"
										},
										{
											"key": "classNameRandomizerType",
											"value": "Physical Combat"
										},
										{
											"key": "levelRandomizerType",
											"value": "High"
										},
										{
											"key": "baseRaceRandomizerType",
											"value": "Standard Base"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "Genetic Meta"
										},
										{
											"key": "forceMetarace",
											"value": "true"
										},
										{
											"key": "abilitiesRandomizerType",
											"value": "Ones as Sixes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Randomizers Returns Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Good&metaraceRandomizerType=Set&forceMetarace=true&setMetarace=Half-Fiend",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"generate"
									],
									"query": [
										{
											"key": "alignmentRandomizerType",
											"value": "Good"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "Set"
										},
										{
											"key": "forceMetarace",
											"value": "true"
										},
										{
											"key": "setMetarace",
											"value": "Half-Fiend"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BUG - Generate Character with Spells with Multiple Sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns generated character\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var character = pm.response.json();\r",
											"    pm.expect(character.summary).to.not.be.empty;\r",
											"    pm.expect(character.class.level).to.be.at.least(1);\r",
											"\r",
											"    pm.expect(character.class.name).to.be.oneOf([\"Cleric\"]);\r",
											"\r",
											"    pm.expect(character.magic.knownSpells.length).to.be.at.least(1);\r",
											"    pm.expect(character.magic.knownSpells[0].sources.Cleric.level).to.be.at.least(0);\r",
											"\r",
											"    pm.expect(character.magic.preparedSpells.length).to.be.at.least(1);\r",
											"    pm.expect(character.magic.preparedSpells[0].sources.Cleric.level).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/generate?alignmentRandomizerType=Any&classNameRandomizerType=Set&levelRandomizerType=medium&baseRaceRandomizerType=any Base&metaraceRandomizerType=any meta&forceMetarace=false&abilitiesRandomizerType=Ones as Sixes&setClassName=cleric",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"generate"
									],
									"query": [
										{
											"key": "alignmentRandomizerType",
											"value": "Any"
										},
										{
											"key": "classNameRandomizerType",
											"value": "Set"
										},
										{
											"key": "levelRandomizerType",
											"value": "medium"
										},
										{
											"key": "baseRaceRandomizerType",
											"value": "any Base"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "any meta"
										},
										{
											"key": "forceMetarace",
											"value": "false"
										},
										{
											"key": "abilitiesRandomizerType",
											"value": "Ones as Sixes"
										},
										{
											"key": "setClassName",
											"value": "cleric"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validate Randomizers",
					"item": [
						{
							"name": "Alignment Randomizers",
							"item": [
								{
									"name": "Validate Randomizers with Any Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any alignment is valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Chaotic Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-chaotic alignment is valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Chaotic&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Chaotic"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Evil Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-evil alignment is valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Evil&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Evil"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Good Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-good alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Good&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Good"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Lawful Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-lawful alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Lawful&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Lawful"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Neutral Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-neutral alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Neutral&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Non-Neutral"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Chaotic Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with chaotic alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Chaotic&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Chaotic"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Evil Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with evil alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Evil&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Evil"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Good Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with good alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Good&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Good"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Lawful Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with lawful alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Lawful&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Lawful"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Neutral Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with neutral alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Neutral&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Neutral"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Set Alignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with set alignment are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Set&setAlignment=Lawful Good&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Lawful Good"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Alignment Randomizer return Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid alignment are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Invalid&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Invalid"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Alignment returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid set alignment are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Set&setAlignment=Invalid Alignment&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Invalid Alignment"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Alignment returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with missing set alignment are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Set&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "alignmentRandomizerType",
													"value": "Set"
												},
												{
													"key": "setAlignment",
													"value": "Neutral Good",
													"disabled": true
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Class Name Randomizers",
							"item": [
								{
									"name": "Validate Randomizers with Set Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with set class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Set&setClassName=Fighter&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Fighter"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Any Player Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any player class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Any Player&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with spellcaster class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Spellcaster&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Spellcaster"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Class Name Randomizer Returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid class name are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Invalid&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Class Name Returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid set class name are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Set&setClassName=Invalid&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Class Name Returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with missing set class name are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Set&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Set"
												},
												{
													"key": "setClassName",
													"value": "Fighter",
													"disabled": true
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Stealth Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with stealth class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Stealth&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Stealth"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-spellcaster class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Non-Spellcaster&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Non-Spellcaster"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Divine Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with divine spellcaster class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Divine Spellcaster&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Divine Spellcaster"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Arcane Spellcaster Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with arcane spellcaster class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Arcane Spellcaster&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Arcane Spellcaster"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Physical Combat Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with physical combat class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Physical Combat&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Physical Combat"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Any NPC Class Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any NPC class name are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Any NPC&alignmentRandomizerType=Any&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "classNameRandomizerType",
													"value": "Any NPC"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Level Randomizers",
							"item": [
								{
									"name": "Validate Randomizers with Any Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Any&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Low Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with low level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Low&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Low"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Medium Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with medium level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Medium&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Medium"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with High Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with high level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=High&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "High"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Very High Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with very high level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Very High&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Very High"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Set Level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with set level are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Set&setLevel=14&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "14"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Level Randomizer returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid level are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Invalid&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Level returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid set level are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Set&setLevel=666&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "666"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Level returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with missing set level are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?levelRandomizerType=Set&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "levelRandomizerType",
													"value": "Set"
												},
												{
													"key": "setLevel",
													"value": "12",
													"disabled": true
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Base Race Randomizers",
							"item": [
								{
									"name": "Validate Randomizers with Any Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any base race is valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Any Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Aquatic Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with aquatic base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Aquatic Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Aquatic Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Monster Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with monster base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Monster Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Monster Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Monster Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-monster base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Non-Monster Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Non-Monster Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Non-Standard Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with non-standard base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Non-Standard Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Non-Standard Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Standard Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with standard base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Standard Base&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Standard Base"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Set Base Race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with standard base race are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Set&setBaseRace=Tiefling&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Tiefling"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Base Race Randomizer returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid base race are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Invalid&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Base Race returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid set base race are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Set&setBaseRace=Invalid&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Base Race returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with missing set base race are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?baseRaceRandomizerType=Set&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "baseRaceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setBaseRace",
													"value": "Tiefling",
													"disabled": true
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Metarace Randomizers",
							"item": [
								{
									"name": "Validate Randomizers with Any Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Any Meta&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Any Forced Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any forced metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Any Meta&forceMetarace=true&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "true"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Any Unforced Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with any unforced metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Any Meta&forceMetarace=false&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Any Meta"
												},
												{
													"key": "forceMetarace",
													"value": "false"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Genetic Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with genetic metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Genetic Meta&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Genetic Meta"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Lycanthrope Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with lycanthrope metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Lycanthrope Meta&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Lycanthrope Meta"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Undead Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with undead metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Undead Meta&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Undead Meta"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with No Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with no metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=No Meta&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "No Meta"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Set Metarace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with set metarace are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Set&setMetarace=Half-Dragon&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Half-Dragon"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Randomizers with Set Metarace - None",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with set metarace of none are valid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Set&setMetarace=&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": ""
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Metarace Randomizer returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid metarace are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Invalid&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Set Metarace returns Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Returns that randomizers with invalid set metarace are invalid\", function () {\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Set&setMetarace=Invalid&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Invalid"
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Set Metarace returns Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns that randomizers with missing set metarace are valid\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    var valid = pm.response.json();\r",
													"    pm.expect(valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "character.dndgen.com/api/v1/character/validate?metaraceRandomizerType=Set&alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&abilitiesRandomizerType=Raw",
											"host": [
												"character",
												"dndgen",
												"com"
											],
											"path": [
												"api",
												"v1",
												"character",
												"validate"
											],
											"query": [
												{
													"key": "metaraceRandomizerType",
													"value": "Set"
												},
												{
													"key": "setMetarace",
													"value": "Half-Dragon",
													"disabled": true
												},
												{
													"key": "alignmentRandomizerType",
													"value": "Any"
												},
												{
													"key": "classNameRandomizerType",
													"value": "Any Player"
												},
												{
													"key": "levelRandomizerType",
													"value": "Any"
												},
												{
													"key": "baseRaceRandomizerType",
													"value": "Any Base"
												},
												{
													"key": "abilitiesRandomizerType",
													"value": "Raw"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-Default Randomizers are Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns that randomizers are valid\", function () {\r",
											"    var valid = pm.response.json();\r",
											"    pm.expect(valid).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Non-Evil&classNameRandomizerType=Physical Combat&levelRandomizerType=High&baseRaceRandomizerType=Standard Base&metaraceRandomizerType=Genetic Meta&forceMetarace=true&abilitiesRandomizerType=Ones as Sixes",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"validate"
									],
									"query": [
										{
											"key": "alignmentRandomizerType",
											"value": "Non-Evil"
										},
										{
											"key": "classNameRandomizerType",
											"value": "Physical Combat"
										},
										{
											"key": "levelRandomizerType",
											"value": "High"
										},
										{
											"key": "baseRaceRandomizerType",
											"value": "Standard Base"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "Genetic Meta"
										},
										{
											"key": "forceMetarace",
											"value": "true"
										},
										{
											"key": "abilitiesRandomizerType",
											"value": "Ones as Sixes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Randomizers are Not Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns that randomizers are not valid\", function () {\r",
											"    var valid = pm.response.json();\r",
											"    pm.expect(valid).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/validate?classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Set&abilitiesRandomizerType=Raw&alignmentRandomizerType=Good&metaraceRandomizerType=Set&forceMetarace=true&setMetarace=Half-Fiend&setBaseRace=Ogre Mage",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"validate"
									],
									"query": [
										{
											"key": "classNameRandomizerType",
											"value": "Any Player"
										},
										{
											"key": "levelRandomizerType",
											"value": "Any"
										},
										{
											"key": "baseRaceRandomizerType",
											"value": "Set"
										},
										{
											"key": "abilitiesRandomizerType",
											"value": "Raw"
										},
										{
											"key": "alignmentRandomizerType",
											"value": "Good"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "Set"
										},
										{
											"key": "forceMetarace",
											"value": "true"
										},
										{
											"key": "setMetarace",
											"value": "Half-Fiend"
										},
										{
											"key": "setBaseRace",
											"value": "Ogre Mage"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Default Randomizers are Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns that default randomizers are valid\", function () {\r",
											"    var valid = pm.response.json();\r",
											"    pm.expect(valid).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/character/validate?alignmentRandomizerType=Any&classNameRandomizerType=Any Player&levelRandomizerType=Any&baseRaceRandomizerType=Any Base&metaraceRandomizerType=Any Meta&forceMetarace=false&abilitiesRandomizerType=Raw",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"character",
										"validate"
									],
									"query": [
										{
											"key": "alignmentRandomizerType",
											"value": "Any"
										},
										{
											"key": "classNameRandomizerType",
											"value": "Any Player"
										},
										{
											"key": "levelRandomizerType",
											"value": "Any"
										},
										{
											"key": "baseRaceRandomizerType",
											"value": "Any Base"
										},
										{
											"key": "metaraceRandomizerType",
											"value": "Any Meta"
										},
										{
											"key": "forceMetarace",
											"value": "false"
										},
										{
											"key": "abilitiesRandomizerType",
											"value": "Raw"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Generate Leadership",
					"item": [
						{
							"name": "Generate Leadership at level 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated leadership for level 6\", function () {\r",
											"    var leadership = pm.response.json();\r",
											"    pm.expect(leadership.score).to.be.at.least(0);\r",
											"    pm.expect(leadership.leadershipModifiers).to.not.be.null;\r",
											"    pm.expect(leadership.cohortScore).to.be.at.least(0);\r",
											"    pm.expect(leadership.followerQuantities.level1).to.be.at.least(0);\r",
											"    pm.expect(leadership.followerQuantities.level2).to.be.at.least(0).and.at.most(leadership.followerQuantities.level1);\r",
											"    pm.expect(leadership.followerQuantities.level3).to.be.at.least(0).and.at.most(leadership.followerQuantities.level2);\r",
											"    pm.expect(leadership.followerQuantities.level4).to.be.at.least(0).and.at.most(leadership.followerQuantities.level3);\r",
											"    pm.expect(leadership.followerQuantities.level5).to.be.at.least(0).and.at.most(leadership.followerQuantities.level4);\r",
											"    pm.expect(leadership.followerQuantities.level6).to.be.at.least(0).and.at.most(leadership.followerQuantities.level5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/leadership/level/:leaderLevel/generate?leaderAnimal=Eagle",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"leadership",
										"level",
										":leaderLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAnimal",
											"value": "Eagle"
										}
									],
									"variable": [
										{
											"key": "leaderLevel",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Leadership at level 5 returns BadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/leadership/level/:leaderLevel/generate?leaderAnimal=Eagle",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"leadership",
										"level",
										":leaderLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAnimal",
											"value": "Eagle"
										}
									],
									"variable": [
										{
											"key": "leaderLevel",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Leadership at level 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated leadership for level 20\", function () {\r",
											"    var leadership = pm.response.json();\r",
											"    pm.expect(leadership.score).to.be.at.least(1);\r",
											"    pm.expect(leadership.leadershipModifiers).to.not.be.null;\r",
											"    pm.expect(leadership.cohortScore).to.be.at.least(1);\r",
											"    pm.expect(leadership.followerQuantities.level1).to.be.at.least(1);\r",
											"    pm.expect(leadership.followerQuantities.level2).to.be.at.least(1).and.at.most(leadership.followerQuantities.level1);\r",
											"    pm.expect(leadership.followerQuantities.level3).to.be.at.least(1).and.at.most(leadership.followerQuantities.level2);\r",
											"    pm.expect(leadership.followerQuantities.level4).to.be.at.least(1).and.at.most(leadership.followerQuantities.level3);\r",
											"    pm.expect(leadership.followerQuantities.level5).to.be.at.least(1).and.at.most(leadership.followerQuantities.level4);\r",
											"    pm.expect(leadership.followerQuantities.level6).to.be.at.least(1).and.at.most(leadership.followerQuantities.level5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/leadership/level/:leaderLevel/generate?leaderCharismaBonus=5",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"leadership",
										"level",
										":leaderLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderCharismaBonus",
											"value": "5"
										}
									],
									"variable": [
										{
											"key": "leaderLevel",
											"value": "20"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Generate Cohort",
					"item": [
						{
							"name": "Generate Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated cohort\", function () {\r",
											"    var cohort = pm.response.json();\r",
											"    pm.expect(cohort).to.not.be.null;\r",
											"    pm.expect(cohort.summary).to.not.be.empty;\r",
											"    pm.expect(cohort.class.level).to.be.at.least(14);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/cohort/score/:cohortScore/generate?leaderLevel=20&leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"cohort",
										"score",
										":cohortScore",
										"generate"
									],
									"query": [
										{
											"key": "leaderLevel",
											"value": "20"
										},
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "cohortScore",
											"value": "22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Leader Level Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/cohort/score/:cohortScore/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"cohort",
										"score",
										":cohortScore",
										"generate"
									],
									"query": [
										{
											"key": "leaderLevel",
											"value": "20",
											"disabled": true
										},
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "cohortScore",
											"value": "22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Class Level Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/cohort/score/:cohortScore/generate?leaderLevel=20&leaderAlignment=True Neutral",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"cohort",
										"score",
										":cohortScore",
										"generate"
									],
									"query": [
										{
											"key": "leaderLevel",
											"value": "20"
										},
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "cohortScore",
											"value": "22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Leader Alignment Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/cohort/score/:cohortScore/generate?leaderLevel=20&leaderClass=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"cohort",
										"score",
										":cohortScore",
										"generate"
									],
									"query": [
										{
											"key": "leaderLevel",
											"value": "20"
										},
										{
											"key": "leaderAlignment",
											"value": "True Neutral",
											"disabled": true
										},
										{
											"key": "leaderClass",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "cohortScore",
											"value": "22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate No Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Generates no cohort\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var cohort = pm.response.json();\r",
											"    pm.expect(cohort).to.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/cohort/score/:cohortScore/generate?leaderLevel=6&leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"cohort",
										"score",
										":cohortScore",
										"generate"
									],
									"query": [
										{
											"key": "leaderLevel",
											"value": "6"
										},
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "cohortScore",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Generate Follower",
					"item": [
						{
							"name": "Generate Follower Level 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 1\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Leader Class Returns Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Leader Alignment Returns Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral",
											"disabled": true
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Follower Level 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 2\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Follower Level 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 3\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Follower Level 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 4\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Follower Level 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 5\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Follower Level 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Returns generated follower - level 6\", function () {\r",
											"    var follower = pm.response.json();\r",
											"    pm.expect(follower).to.not.be.null;\r",
											"    pm.expect(follower.summary).to.not.be.empty;\r",
											"    pm.expect(follower.class.level).to.equal(6);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "character.dndgen.com/api/v1/follower/level/:followerLevel/generate?leaderAlignment=True Neutral&leaderClassName=Fighter",
									"host": [
										"character",
										"dndgen",
										"com"
									],
									"path": [
										"api",
										"v1",
										"follower",
										"level",
										":followerLevel",
										"generate"
									],
									"query": [
										{
											"key": "leaderAlignment",
											"value": "True Neutral"
										},
										{
											"key": "leaderClassName",
											"value": "Fighter"
										}
									],
									"variable": [
										{
											"key": "followerLevel",
											"value": "6"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Swagger UI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Returns Swagger UI\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<title>OpenAPI Document on Azure Functions - Swagger UI</title>\");\r",
							"    pm.expect(pm.response.text()).to.include('url: \"https://character.dndgen.com/api/swagger.json\"');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "character.dndgen.com/api/swagger/ui",
					"host": [
						"character",
						"dndgen",
						"com"
					],
					"path": [
						"api",
						"swagger",
						"ui"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swagger JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Returns Swagger data\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('\"host\": \"character.dndgen.com\"');\r",
							"    pm.expect(pm.response.text()).to.include('\"basePath\": \"/api\"');\r",
							"\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/character/validate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/character/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/leadership/level/{level}/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/cohort/score/{cohortScore}/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/follower/level/{followerLevel}/generate\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "character.dndgen.com/api/swagger.json",
					"host": [
						"character",
						"dndgen",
						"com"
					],
					"path": [
						"api",
						"swagger.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "OpenAPI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Returns Open API documentation\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('\"url\": \"https://character.dndgen.com/api\"');\r",
							"\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/character/validate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/character/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/leadership/level/{level}/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/cohort/score/{cohortScore}/generate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"/v1/follower/level/{followerLevel}/generate\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "character.dndgen.com/api/openapi/1.0",
					"host": [
						"character",
						"dndgen",
						"com"
					],
					"path": [
						"api",
						"openapi",
						"1.0"
					]
				}
			},
			"response": []
		}
	]
}